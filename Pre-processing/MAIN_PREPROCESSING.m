%% -------------------------------------
%% INITIALIZE PRE_PROCESSING: 
% 1) Rearrange the images
% 2) Register the images
% 3) Remove the skull
% 3.5) Improve the brain images
% 4) Get the manually annotated images 
% 5) Register the images again (including the manually annotated images)
% 6) Save the images
%% -------------------------------------
function MAIN_PREPROCESSING(args)
    %% 0 - Arguments 
    directory = args.directory; % Directory of the images
    patients = args.patients; % Array of patients to process
    annotatedImagesFolder = args.annotatedImagesFolder; % Directory of the annotated images
    saveRegisteredFolder = args.saveRegisteredFolder; % Directory for saving the final registered images
    workspaceFolder = args.workspaceFolder; % Directory to save and load the workspaces
    MRIFolder = args.MRIFolder; % Directory of the DWI images 
    previousNumPatiens = 0;
    maskRegisteredFolder = "";
    saveForVISUALFolder = "";
    saveImageRegisteredFolder = args.saveImageRegisteredFolder;
    additionalFlag = "";
    CURRENT_STEP = args.INITIAL_STEP; % start from this step!
    %% flags
    ISLISTOFDIR = 0; 
    SAVE = args.save; % Save the workspace? (1=yes, 0=no)
    isNIfTI = 0; % flag for the NIfTI format
    isFAKE = 0; % for images generated by GANs
    isISLES2018 = 0; % flag for the ISLES2018 dataset
    newIDFormat = false;
    SAVE_INTERMEDIATE_STEPS = args.SAVE_INTERMEDIATE_STEPS; % flag to save the intermediate steps and to load the intermediate images if they are already saved
    SAVE_AS_TIFF = args.SAVE_AS_TIFF; % flag to save the final image as a matrix txt file 
    CONSTRASTENHANCEMENT = args.CONSTRASTENHANCEMENT; % flag to perform the preprocessing steps at all...
    IMGADJUST = args.IMGADJUST; % add an imgadjust step during contrast enhancement
    GAMMA = args.GAMMA; % gamma value for gamma correction during contrast enhancement
    HISTEQ = args.HISTEQ; % use histeq step during contrast enhancement
    ZSCORE = args.ZSCORE; % flag for zero mean and unit variance in the contrast enhancement 
    CONVERT_TO_DOUBLE = args.CONVERT_TO_DOUBLE; % flag to conver the images to double
    NO_REGISTRATION = args.NO_REGISTRATION; % flag to skip the registration step
    OLD_PREPROC_STEPS = args.OLD_PREPROC_STEPS;
    suffix_workspace = args.suffix_workspace;
    CONVERT_TO_HU = args.CONVERT_TO_HU;
    CROP_VALUES = args.CROP_VALUES;
    NEW_SKULLSTRIPPING = args.NEW_SKULLSTRIPPING; 
    
    Image = "";
    sortedK = [];
    
    %% optional field -------------------------------------------------------------
    if isfield(args, 'isNIfTI')
        isNIfTI = args.isNIfTI;
        if isNIfTI
            suffix_workspace = suffix_workspace + "_nifti";
        end
    end
    if isfield(args, 'isFAKE')
        isFAKE = args.isFAKE;
    end
    if isfield(args, 'isISLES2018')
        isISLES2018 = args.isISLES2018;
        if isISLES2018
            suffix_workspace = suffix_workspace+ "_ISLES2018";
        end
    end
    if isfield(args, "additionalFlag") % var containing the number of patients to add when creating the new folders
        suffix_workspace = suffix_workspace + args.additionalFlag;
    end    
    if isfield(args, 'newIDFormat')
        newIDFormat = args.newIDFormat;
    end
    if isfield(args, "DICOMfolders") % var containing the folderS with the DICOM images (extracted with extractINFOfromNewPatients.m
        directory = args.DICOMfolders;
        ISLISTOFDIR = 1;
    end
    if isfield(args, "previousNumPatiens") % var containing the number of patients to add when creating the new folders
        previousNumPatiens = args.previousNumPatiens;
    end
    if isfield(args, "saveForVISUALFolder") % var containing the optional folder to save and visualize the final images
        saveForVISUALFolder = args.saveForVISUALFolder;
    end
    if isfield(args, "saveContrastEnhancementFolder") % var containing the optional folder to save the contrast enhancement images after brain extraction
        saveContrastEnhancementFolder = args.saveContrastEnhancementFolder;
    end
    if isfield(args, "maskRegisteredFolder") % var containing the optional folder to save the masks after brain extraction
        maskRegisteredFolder = args.maskRegisteredFolder;
    end
    
    %% -------------------------------------------------------------
    if ~isfolder(workspaceFolder)
        mkdir(workspaceFolder)
    end
    
    %% 1 - Rearrange the images of all the patients
    if CURRENT_STEP >= 1
        if ~isNIfTI && ~isFAKE % the patients are saved as DICOM file
            disp("Rearrange images...");
            if CURRENT_STEP == 1
                tic
                CURRENT_STEP = CURRENT_STEP + 1;
                [Image, sortedK] = rearrangeImages(directory, ISLISTOFDIR, patients, SAVE, workspaceFolder, '', suffix_workspace, CONVERT_TO_DOUBLE);

                if SAVE_INTERMEDIATE_STEPS
                    suffix = "01_orig";
                    saveRegisteredImages(Image, saveRegisteredFolder, saveForVISUALFolder, patients, suffix, previousNumPatiens, newIDFormat, directory, SAVE_AS_TIFF);
                end
                
                % to skip the registration step
                if NO_REGISTRATION
                    CURRENT_STEP = CURRENT_STEP + 1;
                    ImageRegistered = Image;
                end
                
                toc
                if SAVE
                    disp("Calculate Structural similarity (SSIM) index for rearranged images");
                    tic
                    calculateSSIM(Image,patients,workspaceFolder,ISLISTOFDIR,directory,"00");
                    toc
                end
            end
            %% -------------------------------------------------------------
            %% 2 - Image regitration
            if CURRENT_STEP == 2
                CURRENT_STEP = CURRENT_STEP + 1;
                disp("Register images...");
                tic     
                ImageRegistered = reg_ct(directory, ISLISTOFDIR, Image, sortedK, patients, 1, SAVE, workspaceFolder, '', suffix_workspace, MRIFolder);

                if SAVE_INTERMEDIATE_STEPS
                    suffix = "02_registration";
                    saveRegisteredImages(ImageRegistered, saveRegisteredFolder, saveForVISUALFolder, patients, suffix, previousNumPatiens, newIDFormat, directory, SAVE_AS_TIFF);
                end
                toc
                
                if SAVE
                    disp("Calculate Structural similarity (SSIM) index for registered images");
                    tic
                    calculateSSIM(ImageRegistered,patients,workspaceFolder,ISLISTOFDIR,directory,"01");
                    toc
                end
            end
        else 
            CURRENT_STEP = 3;
        end % only if the images are in DICOM format
    end

%     clearvar Image;

    %% -------------------------------------------------------------
    %% 3 - Skull removal
    if CURRENT_STEP == 3
        CURRENT_STEP = CURRENT_STEP +0.5;
        disp("Remove skulls...");
        tic

        thold = 9;
        if isNIfTI && isISLES2018
            if exist(strcat(workspaceFolder, 'Image', suffix_workspace, '_4dPWI.mat'), 'file') == 2
                load(strcat(workspaceFolder, 'Image', suffix_workspace, '_4dPWI.mat'))
            else
                ImageRegistered = extractNIfTIImagesISLES2018(directory, SAVE, workspaceFolder, suffix_workspace, "4DPWI", 0, "", "", 0, SAVE_AS_TIFF);

                if SAVE_INTERMEDIATE_STEPS
                    suffix = "01_orig";
                    saveRegisteredImages(ImageRegistered, saveRegisteredFolder, saveForVISUALFolder, patients, suffix, previousNumPatiens, newIDFormat, directory, SAVE_AS_TIFF);
                end
            end
        elseif isFAKE
            ImageRegistered = extractFromFakePatient(directory, SAVE, workspaceFolder, suffix_workspace, SAVE_AS_TIFF);
        end
        
        if args.INITIAL_STEP == CURRENT_STEP-0.5  % just to override problems 
            ImageRegistered = [];
        end

        %% various skull removal technique...
        ImageSkullRemoved = combinedTechniquesSkullRemoval(ImageRegistered, thold, patients, directory, SAVE, workspaceFolder, suffix_workspace, isNIfTI, ISLISTOFDIR, args.SAVE_AS_TIFF, ...
            saveImageRegisteredFolder, maskRegisteredFolder, NEW_SKULLSTRIPPING, CONVERT_TO_HU, CONVERT_TO_DOUBLE, CROP_VALUES, isFAKE);
% %         ImageSkullRemoved = anotherSkullRemovalTechnique(ImageRegistered, patients, SAVE, workspaceFolder);
% %         ImageSkullRemoved = generalSkullRemoval(ImageRegistered, patients, SAVE, workspaceFolder);
        if SAVE_INTERMEDIATE_STEPS
            suffix = "03_skullremoval";
            saveRegisteredImages(ImageSkullRemoved, saveRegisteredFolder, saveForVISUALFolder, patients, suffix, previousNumPatiens, newIDFormat, directory, SAVE_AS_TIFF);
        end
        toc
    end
    
    ImageRegistered = [];
    disp("Calculate Signal-to-noise ratio (SNR) after skull extraction");
    tic
    calculateSNR(ImageSkullRemoved,patients,workspaceFolder,ISLISTOFDIR,directory,"afterskull");
    toc

    if CONSTRASTENHANCEMENT
        %% -------------------------------------------------------------
        %% 3.5 - Improve the brain images
        if CURRENT_STEP == 3.5
            CURRENT_STEP = CURRENT_STEP + 0.5;
            disp("Contrast enhancement...");
            tic
            ImageSkullRemovedFiltered = improveImagesSkullRemoved(ImageSkullRemoved, patients, SAVE, workspaceFolder, saveContrastEnhancementFolder, ...
                suffix_workspace, SAVE_INTERMEDIATE_STEPS, saveRegisteredFolder, previousNumPatiens, saveForVISUALFolder, ...
                directory, ISLISTOFDIR, SAVE_AS_TIFF, OLD_PREPROC_STEPS, HISTEQ, IMGADJUST, GAMMA, ZSCORE, CONVERT_TO_HU, CROP_VALUES, isFAKE);
            toc
        end
        %% -------------------------------------------------------------
        %% 4&5 - Image registration with the images without skull and the manually annotated images.
        if CURRENT_STEP == 4 || CURRENT_STEP == 5
            CURRENT_STEP = 6;
            disp("Register images again with manual annotations...");
            tic
            if exist('ImageSkullRemovedFiltered','var')==0 && exist(strcat(workspaceFolder, 'ImageSkullRemovedFiltered', suffix_workspace, '.mat'), 'file') == 2
                load(strcat(workspaceFolder, 'ImageSkullRemovedFiltered', suffix_workspace, '.mat'));
            end

            if annotatedImagesFolder ~= ""
                NewImageRegistered = registerAnnotated(directory, ISLISTOFDIR, ImageSkullRemovedFiltered, annotatedImagesFolder, ...
                    patients, SAVE, workspaceFolder, suffix_workspace);
            else 
                NewImageRegistered = ImageSkullRemovedFiltered;
            end
            toc
        end
    else 
        NewImageRegistered = ImageSkullRemoved;
        CURRENT_STEP = 6;
    end

    ImageSkullRemovedFiltered = [];

    %% -------------------------------------------------------------
    %% 6 - Save the images
    if CURRENT_STEP == 6
        disp("Save images...");
        tic

        if annotatedImagesFolder ~= "" && exist('NewImageRegistered','var')==0 && exist(strcat(workspaceFolder, 'NewImageRegistered', suffix_workspace, '.mat'), 'file') == 2
            load(strcat(workspaceFolder, 'NewImageRegistered', suffix_workspace, '.mat'));
        end

        suffix = "";
        if isfield(args, 'finalSaveFolder')
            saveRegisteredFolder = args.finalSaveFolder;
            mkdir(saveRegisteredFolder)
        end
        
        if isfield(args, 'saveForVISUALFolder')
            saveForVISUALFolder = args.saveForVISUALFolder;
            mkdir(saveForVISUALFolder)
        end


        disp("Calculate Signal-to-noise ratio (SNR) after contrast enhancement");
        tic
        calculateSNR(NewImageRegistered,patients,workspaceFolder,ISLISTOFDIR,directory,"aftercontrast");
        toc

        if SAVE
        saveRegisteredImages(NewImageRegistered, saveRegisteredFolder, saveForVISUALFolder, ...
            patients, suffix, previousNumPatiens, newIDFormat, directory ,SAVE_AS_TIFF, ...
            CONSTRASTENHANCEMENT, 1, maskRegisteredFolder, CONVERT_TO_HU, CONVERT_TO_DOUBLE);
        toc 
        end
    end
end
